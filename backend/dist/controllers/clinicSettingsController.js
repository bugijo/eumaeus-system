"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const clinicSettingsService_1 = require("../services/clinicSettingsService");
class ClinicSettingsController {
    static async getSettings(req, res) {
        try {
            const clinicId = parseInt(req.query.clinicId) || 1;
            console.log(`üîç Buscando configura√ß√µes da cl√≠nica ${clinicId}...`);
            const settings = await clinicSettingsService_1.clinicSettingsService.getSettings(clinicId);
            console.log('‚úÖ Configura√ß√µes encontradas com sucesso');
            res.status(200).json({
                success: true,
                data: settings
            });
        }
        catch (error) {
            console.error('‚ùå Erro ao buscar configura√ß√µes:', error);
            res.status(500).json({
                success: false,
                message: 'Erro interno do servidor ao buscar configura√ß√µes',
                error: error instanceof Error ? error.message : 'Erro desconhecido'
            });
        }
    }
    static async updateSettings(req, res) {
        try {
            const clinicId = parseInt(req.query.clinicId) || 1;
            const updateData = req.body;
            console.log(`üîß Atualizando configura√ß√µes da cl√≠nica ${clinicId}...`);
            console.log('üìù Dados recebidos:', updateData);
            if (updateData.reminderSendTime && !clinicSettingsService_1.clinicSettingsService.validateTimeFormat(updateData.reminderSendTime)) {
                return res.status(400).json({
                    success: false,
                    message: 'Formato de hor√°rio inv√°lido. Use o formato HH:MM (ex: 08:00)'
                });
            }
            if (updateData.vaccineReminderDaysBefore !== undefined) {
                if (updateData.vaccineReminderDaysBefore < 1 || updateData.vaccineReminderDaysBefore > 30) {
                    return res.status(400).json({
                        success: false,
                        message: 'Dias antes do lembrete de vacina deve estar entre 1 e 30'
                    });
                }
            }
            if (updateData.appointmentReminderTemplate) {
                const validation = clinicSettingsService_1.clinicSettingsService.validateTemplate(updateData.appointmentReminderTemplate, 'appointment');
                if (!validation.isValid) {
                    return res.status(400).json({
                        success: false,
                        message: 'Template de lembrete de consulta inv√°lido',
                        errors: validation.errors
                    });
                }
            }
            if (updateData.vaccineReminderTemplate) {
                const validation = clinicSettingsService_1.clinicSettingsService.validateTemplate(updateData.vaccineReminderTemplate, 'vaccine');
                if (!validation.isValid) {
                    return res.status(400).json({
                        success: false,
                        message: 'Template de lembrete de vacina inv√°lido',
                        errors: validation.errors
                    });
                }
            }
            const updatedSettings = await clinicSettingsService_1.clinicSettingsService.updateSettings(updateData, clinicId);
            console.log('‚úÖ Configura√ß√µes atualizadas com sucesso');
            res.status(200).json({
                success: true,
                message: 'Configura√ß√µes atualizadas com sucesso',
                data: updatedSettings
            });
        }
        catch (error) {
            console.error('‚ùå Erro ao atualizar configura√ß√µes:', error);
            res.status(500).json({
                success: false,
                message: 'Erro interno do servidor ao atualizar configura√ß√µes',
                error: error instanceof Error ? error.message : 'Erro desconhecido'
            });
        }
    }
    static async testEmailSettings(req, res) {
        try {
            const clinicId = parseInt(req.query.clinicId) || 1;
            console.log(`üß™ Testando configura√ß√µes de e-mail da cl√≠nica ${clinicId}...`);
            const testResult = await clinicSettingsService_1.clinicSettingsService.testEmailSettings(clinicId);
            res.status(200).json({
                success: testResult.success,
                message: testResult.message
            });
        }
        catch (error) {
            console.error('‚ùå Erro ao testar configura√ß√µes de e-mail:', error);
            res.status(500).json({
                success: false,
                message: 'Erro interno do servidor ao testar configura√ß√µes de e-mail',
                error: error instanceof Error ? error.message : 'Erro desconhecido'
            });
        }
    }
    static async resetToDefaults(req, res) {
        try {
            const clinicId = parseInt(req.query.clinicId) || 1;
            console.log(`üîÑ Resetando configura√ß√µes da cl√≠nica ${clinicId} para padr√£o...`);
            const defaultSettings = await clinicSettingsService_1.clinicSettingsService.resetToDefaults(clinicId);
            console.log('‚úÖ Configura√ß√µes resetadas com sucesso');
            res.status(200).json({
                success: true,
                message: 'Configura√ß√µes resetadas para valores padr√£o',
                data: defaultSettings
            });
        }
        catch (error) {
            console.error('‚ùå Erro ao resetar configura√ß√µes:', error);
            res.status(500).json({
                success: false,
                message: 'Erro interno do servidor ao resetar configura√ß√µes',
                error: error instanceof Error ? error.message : 'Erro desconhecido'
            });
        }
    }
    static async getReminderStats(req, res) {
        try {
            const clinicId = parseInt(req.query.clinicId) || 1;
            console.log(`üìä Buscando estat√≠sticas de lembretes da cl√≠nica ${clinicId}...`);
            const stats = await clinicSettingsService_1.clinicSettingsService.getReminderStats(clinicId);
            res.status(200).json({
                success: true,
                data: stats
            });
        }
        catch (error) {
            console.error('‚ùå Erro ao buscar estat√≠sticas:', error);
            res.status(500).json({
                success: false,
                message: 'Erro interno do servidor ao buscar estat√≠sticas',
                error: error instanceof Error ? error.message : 'Erro desconhecido'
            });
        }
    }
    static async getTemplateVariables(req, res) {
        try {
            const variables = {
                appointment: [
                    { variable: '{tutor}', description: 'Nome do tutor' },
                    { variable: '{pet}', description: 'Nome do pet' },
                    { variable: '{data}', description: 'Data da consulta' },
                    { variable: '{hora}', description: 'Hor√°rio da consulta' },
                    { variable: '{clinica}', description: 'Nome da cl√≠nica' },
                    { variable: '{telefone}', description: 'Telefone da cl√≠nica' }
                ],
                vaccine: [
                    { variable: '{tutor}', description: 'Nome do tutor' },
                    { variable: '{pet}', description: 'Nome do pet' },
                    { variable: '{vacina}', description: 'Nome da vacina' },
                    { variable: '{data}', description: 'Data de vencimento' },
                    { variable: '{clinica}', description: 'Nome da cl√≠nica' },
                    { variable: '{telefone}', description: 'Telefone da cl√≠nica' }
                ]
            };
            res.status(200).json({
                success: true,
                data: variables
            });
        }
        catch (error) {
            console.error('‚ùå Erro ao buscar vari√°veis de template:', error);
            res.status(500).json({
                success: false,
                message: 'Erro interno do servidor',
                error: error instanceof Error ? error.message : 'Erro desconhecido'
            });
        }
    }
}
exports.default = ClinicSettingsController;
//# sourceMappingURL=clinicSettingsController.js.map